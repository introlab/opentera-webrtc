# Testing cpp and python libraries.
name: cpp-python-tests

on:
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.8]
        build-type: [Debug, Release]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Generate Version Output
        id: generate_version_output
        run: echo "::set-output name=version::$(cat VERSION)"
        shell: bash

      - name: Print Version Information
        run: echo "Version ${{ steps.generate_version_output.outputs.version }}"
        shell: bash

      - name: Generate OS Release Output
        id: generate_os_release_name_output
        run: echo "::set-output name=os_release_name::$(lsb_release -i -s)"
        shell: bash

      - name: Generate OS Release Version Output
        id: generate_os_release_version_output
        run: echo "::set-output name=os_release_version::$(lsb_release -r -s)"
        shell: bash

      - name: Generate OS Release Architecture Output
        id: generate_os_release_architecture_output
        run: echo "::set-output name=os_release_architecture::$(uname -i)"
        shell: bash

      - name: Generate Release File Name
        id: generate_release_file_name
        run: |
          echo "::set-output name=release_file_name::opentera-webrtc-native-client-${{runner.os}}-\
          ${{ steps.generate_os_release_name_output.outputs.os_release_name }}-\
          ${{ steps.generate_os_release_version_output.outputs.os_release_version }}-\
          ${{ steps.generate_os_release_architecture_output.outputs.os_release_architecture }}-\
          ${{ steps.generate_version_output.outputs.version }}"

      - name: Print Release File Name
        run: echo "Release File Name ${{ steps.generate_release_file_name.outputs.release_file_name }}"
        shell: bash

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake build-essential libssl-dev libboost-all-dev
          sudo apt-get install libglib2.0-dev libgtk-3-dev libpulse-dev libasound2-dev tree
      - name: Install python dependencies
        run: |
          python3 -m pip install --user --upgrade pip
          python3 -m pip install --user --upgrade setuptools wheel
          python3 -m pip install --user --upgrade twine
      - name: Create build directory
        working-directory: opentera-webrtc-native-client
        run: |
          mkdir build

      - name: Run CMake and build opentera-webrtc-native-client
        working-directory: opentera-webrtc-native-client/build
        run: |
          cmake ../ -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          make -j2
          make install
          find -name "opentera_webrtc_native_client*.so
          tree ../dist/${{ matrix.build_type }}/opentera-webrtc-native-client-{{ steps.generate_version_output.outputs.version }}/python/package/build
        # rm -rf ../dist/${{ matrix.build_type }}/opentera-webrtc-native-client-{{ steps.generate_version_output.outputs.version }}/opentera_webrtc_native_client/build
        # rm -rf ../dist/${{ matrix.build_type }}/opentera-webrtc-native-client-{{ steps.generate_version_output.outputs.version }}/opentera_webrtc_native_client/*.so
        # rm -rf ../dist/${{ matrix.build_type }}/opentera-webrtc-native-client-{{ steps.generate_version_output.outputs.version }}/opentera_webrtc_native_client/opentera_webrtc_native_client.egg-info

      - name: Install python dependencies for signaling-server
        working-directory: signaling-server
        run: |
          if [ -f requirements.txt ]; then pip3 install -r requirements.txt; fi

      - name: Run CPP Tests
        working-directory: opentera-webrtc-native-client/build/bin
        run: |
          ./OpenteraWebrtcNativeClientTests

      - name: Run Python signaling-server Tests
        working-directory: signaling-server
        run: |
          python3 -m unittest discover tests "test_*.py"

      - name: Run Python webrtc-native-client Tests
        working-directory: opentera-webrtc-native-client/OpenteraWebrtcNativeClient/python/test
        run: |
          if [ -f requirements.txt ]; then pip3 install -r requirements.txt; fi
          cp ../../../build/OpenteraWebrtcNativeClient/python/bin/${{ matrix.build_type }}/opentera_webrtc_native_client.cpython*.so .
          python3 -m unittest discover . "*_test.py"
