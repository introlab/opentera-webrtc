# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CPP-Python-tests-and-release

on:
  workflow_dispatch:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Generate Version Output
      id: generate_version_output
      run: echo "::set-output name=version::$(cat VERSION)"
      shell: bash
        
    - name: Print Version Information
      run: echo "Version ${{ steps.generate_version_output.outputs.version }}"
      shell: bash
   
    - name: Generate OS Release Output
      id: generate_os_release_name_output
      run: echo "::set-output name=os_release_name::$(lsb_release -i -s)"
      shell: bash
        
    - name: Generate OS Release Version Output
      id: generate_os_release_version_output
      run: echo "::set-output name=os_release_version::$(lsb_release -r -s)"
      shell: bash       
        
    - name: Generate OS Release Version Output
      id: generate_os_release_architecture_output
      run: echo "::set-output name=os_release_architecture::$(uname -i)"
      shell: bash   
          
    - name: Generate Release File Name
      id: generate_release_file_name
      run: |
        echo "::set-output name=release_file_name::opentera-webrtc-native-client-${{runner.os}}-\
        ${{ steps.generate_os_release_name_output.outputs.os_release_name }}-\
        ${{ steps.generate_os_release_version_output.outputs.os_release_version }}-\
        ${{ steps.generate_os_release_architecture_output.outputs.os_release_architecture }}-\
        ${{ steps.generate_version_output.outputs.version }}"
          
    - name: Print Release File Name
      run: echo "Release File Name ${{ steps.generate_release_file_name.outputs.release_file_name }}"
      shell: bash
        
    - name: Install system dependencies
      run: | 
        sudo apt-get update
        sudo apt-get install ninja-build cmake build-essential libssl-dev libboost-all-dev 
        sudo apt-get install libglib2.0-dev libgtk-3-dev libpulse-dev libasound2-dev 
    - name: Install python dependencies
      run: |
        python3 -m pip install --user --upgrade pip
        python3 -m pip install --user --upgrade setuptools wheel
        python3 -m pip install --user --upgrade twine

    - name: Create build directory
      working-directory: opentera-webrtc-native-client
      run: |
        mkdir build
        
    - name: Run CMake and build opentera-webrtc-native-client
      working-directory: opentera-webrtc-native-client/build
      run: |
        cmake ../
        make -j2
        make install
        make python-wheel-package
        rm -rf ../dist/Release/opentera-webrtc-native-client-{{ steps.generate_version_output.outputs.version }}/python/package/build
        rm -rf ../dist/Release/opentera-webrtc-native-client-{{ steps.generate_version_output.outputs.version }}/python/package/*.so
        rm -rf ../dist/Release/opentera-webrtc-native-client-{{ steps.generate_version_output.outputs.version }}/python/package/opentera_webrtc_native_client.egg-info
        
    - name: Install python dependencies for signaling-server
      working-directory: signaling-server
      run: |
        if [ -f requirements.txt ]; then pip3 install -r requirements.txt; fi
        
    - name: Run CPP Tests
      working-directory: opentera-webrtc-native-client/build/bin
      run: |
        ./OpenteraWebrtcNativeClientTests
        
    - name: Run Python signaling-server Tests
      working-directory: signaling-server
      run : |
        python3 -m unittest discover tests "test_*.py"        
        
    - name: Run Python webrtc-native-client Tests
      working-directory: opentera-webrtc-native-client/OpenteraWebrtcNativeClient/python/test
      run : |
        if [ -f requirements.txt ]; then pip3 install -r requirements.txt; fi
        cp ../../../build/OpenteraWebrtcNativeClient/python/bin/Release/opentera_webrtc_native_client.cpython-38-x86_64-linux-gnu.so .
        python3 -m unittest discover . "*_test.py"
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ steps.generate_version_output.outputs.version }}
        release_name: opentera-webrtc-native-client-${{ steps.generate_version_output.outputs.version }}
        body: |
            Latest build of opentera-webrtc-native-client
            - This is a prerelease, use at your own risks.
        draft: true
        prerelease: true
     
    - name: Create Archive
      working-directory: opentera-webrtc-native-client/dist/Release
      run : |
        tar cvzf ${{ steps.generate_release_file_name.outputs.release_file_name }}.tar.gz opentera-webrtc-native-client-${{ steps.generate_version_output.outputs.version }}
        
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: opentera-webrtc-native-client/dist/Release/${{ steps.generate_release_file_name.outputs.release_file_name }}.tar.gz
        asset_name: ${{ steps.generate_release_file_name.outputs.release_file_name }}.tar.gz
        asset_content_type: application/x-gzip
        
        

